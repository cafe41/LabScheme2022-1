
(define L1 (list 1 2 3 4 5 6 7 8 9 10 11 12 13))



(define (PrimeraCarta L1 numE n)
    (if (= n numE)
        null
        (cons (car L1) (PrimeraCarta (cdr L1) numE (+ n 1)))
      )
 )

(define Carta1 (PrimeraCarta L1 4 0))


(define (nCartas Carta1 listaCartasN i L1)
   (if (eq? (length Carta1) (+(length listaCartasN)1))
       listaCartasN
       (nCartas Carta1 (cons (crearCarta (cdr Carta1) i L1 (list (car Carta1)))
                             listaCartasN)
                (+ (- i 1) (length Carta1)) L1)))


(define (crearCarta Carta1 i L1 cartaN)
   (if (null? Carta1)
       cartaN
       (crearCarta (cdr Carta1) (+ i 1) L1
                   (cons (list-ref L1 i)cartaN))))

(define Cartas (cons Carta1 (nCartas Carta1 '() 4 L1)))
